{
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Infrastructure configurations"
          },
          "Parameters": [
            "environmentType",
            "KeyName",
            "VPCID",
            "AZ1PrivateSubnet1ID",
            "CreateNewSecurityGroup",
            "NewDBSecurityGroupName",
            "NewAppSecurityGroupName",
            "NewWebDispatcherSecurityGroupName",
            "NewSecurityGroupCIDRs",
            "NewSecurityGroupExistingSourceSGIDs",
            "NewSecurityGroupNumCIDRs",
            "NewSecurityGroupNumSGIDs",
            "HANADBSecurityGroupID",
            "AppSecurityGroupID",
            "Proxy",
            "NoProxy",
            "SAPTZ",
            "Encryption",
            "EbsKmsKeyArn",
            "DomainName",
            "HostedZoneName",
            "HostedZoneId",
            "SIDadmUID",
            "SAPsysGID",
            "SAPVirtualIPOptIn"
          ]
        },
        {
          "Label": {
            "default": "General settings - HANA Database"
          },
          "Parameters": [
            "HANASID",
            "SAPInstanceNum",
            "VolumeTypeHanaData",
            "VolumeTypeHanaLog",
            "VolumeTypeHanaOthers",
            "InstallHANA",
            "HANAInstallMedia",
            "HANAMasterPassKey",
            "InstallBackint",
            "BackintParameters",
            "BackintCreateEbsVolume"
          ]
        },
        {
          "Label": {
            "default": "General settings - SAP System"
          },
          "Parameters": [
            "SAPSID",
            "VolumeTypeAppData"
          ]
        },
        {
          "Label": {
            "default": "General settings - Transport File System"
          },
          "Parameters": [
            "UseTransportFS",
            "CreateEFS",
            "CreateMountTargetAZ1",
            "TransportFSId",
            "MountTargetIdAZ1",
            "MountTargetSecurityGroupAZ1",
            "MountTargetIPAddressAZ1",
            "Timestamp"
          ]
        },
        {
          "Label": {
            "default": "Instance and Operating System"
          },
          "Parameters": [
            "HANAOS",
            "HANAAMIID",
            "HANAAMIVolumeSizes",
            "HANASLESBYOSRegCode",
            "HANARhelByosSecretArn",
            "HANAHostname",
            "HANAVirtualHostname",
            "HANAPrimaryByoip",
            "HANAPrimaryVirtualByoip",
            "HANAAutoRecovery",
            "HANAInstanceType"
          ]
        },
        {
          "Label": {
            "default": "Default configuration"
          },
          "Parameters": [
            "Ec2InstanceRoleName",
            "UniqueID",
            "LogGroupName",
            "AssetsS3BucketName",
            "AssetsS3KeyPrefix",
            "AssetsS3RegionCode"
          ]
        },
        {
          "Label": {
            "default": "SAP Application installation"
          },
          "Parameters": [
            "SapmediaCreateEFS",
            "SapMediaEFS",
            "SapMediaS3",
            "InstallHANA",
            "InstallSap",
            "InstallSapWebDispatcher",
            "AppInstallationSpecification"
          ]
        },
        {
          "Label": {
            "default": "Customizations"
          },
          "Parameters": [
            "ConfigurationScripts"
          ]
        }
      ],
      "ParameterLabels": {
        "EnvironmentType": {
          "default": "Is this a production or non-production environment?"
        },
        "KeyName": {
          "default": "Choose key pair"
        },
        "VPCID": {
          "default": "Choose VPC ID"
        },
        "AZ1PrivateSubnet1ID": {
          "default": "Choose private subnet"
        },
        "HANADBSecurityGroupID": {
          "default": "Choose security group ID for DB tier"
        },
        "AppSecurityGroupID": {
          "default": "Choose security group ID for App tier"
        },
        "WebDispatcherSecurityGroupId": {
          "default": "Choose security group ID for Web Dispatcher tier"
        },
        "CreateNewSecurityGroup": {
          "default": "Would you like to create a new security group?"
        },
        "NewDBSecurityGroupName": {
          "default": "Enter name for DB security group if creating a new one"
        },
        "NewAppSecurityGroupName": {
          "default": "Enter name for App security group if creating a new one"
        },
        "NewWebDispatcherSecurityGroupName": {
          "default": "Enter name for Web Dispatcher security group if creating a new one"
        },
        "NewSecurityGroupCIDRs": {
          "default": "Enter CIDRs for new security group"
        },
        "NewSecurityGroupExistingSourceSGIDs": {
          "default": "Enter security group IDs for first rule for new security group"
        },
        "NewSecurityGroupNumCIDRs": {
          "default": "Enter number of CIDRs for new security group if applicable"
        },
        "NewSecurityGroupNumSGIDs": {
          "default": "Enter number of security group IDs for new security group, if applicable"
        },
        "Proxy": {
          "default": "Enter proxy server address"
        },
        "NoProxy": {
          "default": "Enter endpoint and urls that should bypass proxy server"
        },
        "SAPTZ": {
          "default": "Enter SAP HANA Server timezone"
        },
        "Encryption": {
          "default": "Would you like to turn on encryption?"
        },
        "EbsKmsKeyArn": {
          "default": "Provide the KMS key ARN to be used for EBS encryption."
        },
        "DomainName": {
          "default": "Enter domain name"
        },
        "HostedZoneName": {
          "default": "Enter Route53 hosted zone name"
        },
        "HostedZoneId": {
          "default": "Enter Route53 hosted zone Id"
        },
        "SIDadmUID": {
          "default": "SIDadm user id"
        },
        "SAPsysGID": {
          "default": "SAPSYS group id"
        },
        "SAPVirtualIPOptIn": {
          "default": "Would you like to opt in to use SAP virtual hostname / ip?"
        },
        "HANASID": {
          "default": "Enter SAP HANA system ID"
        },
        "SAPInstanceNum": {
          "default": "Enter SAP HANA instance number"
        },
        "VolumeTypeHanaData": {
          "default": "Choose storage volume type for SAP HANA Data"
        },
        "VolumeTypeHanaLog": {
          "default": "Choose storage volume type for SAP HANA Log"
        },
        "VolumeTypeHanaOthers": {
          "default": "Choose storage volume type for other volumes"
        },
        "InstallHANA": {
          "default": "Install SAP HANA software?"
        },
        "HANAInstallMedia": {
          "default": "Enter Amazon S3 URL for SAP HANA software"
        },
        "HANAMasterPassKey": {
          "default": "Enter the Parameter Name for SAP HANA password"
        },
        "InstallBackint": {
          "default": "Do you want to install and configure backint?"
        },
        "BackintParameters": {
          "default": "Enter the Parameter for backint in json format"
        },
        "BackintCreateEbsVolume": {
          "default": "Do you want to create EBS volume for backups ?"
        },
        "HANAOS": {
          "default": "Choose operating system for SAP HANA"
        },
        "HANAAMIID": {
          "default": "Enter AMI ID for SAP HANA"
        },
        "HANASLESBYOSRegCode": {
          "default": "If using SUSE and own subscription, Enter SUSE BYOS Registration Code"
        },
        "HANARhelByosSecretArn": {
          "default": "If using RHEL and own subscription, Enter RHEL credetails secret ARN."
        },
        "HANAHostname": {
          "default": "Enter SAP HANA hostname"
        },
        "HANAVirtualHostname": {
          "default": "Enter SAP HANA virtual hostname, Only required if you have selected Yes for SAPVirtualIPOptIn"
        },
        "HANAPrimaryByoip": {
          "default": "Custom Private ip for hana node."
        },
        "HANAPrimaryVirtualByoip": {
          "default": "Custom Private secondary ip for hana node, Only required if you have selected Yes for SAPVirtualIPOptIn"
        },
        "HANAAutoRecovery": {
          "default": "Would you like to turn on automatic recovery?"
        },
        "HANAInstanceType": {
          "default": "Choose instance type for SAP HANA"
        },
        "DedicatedHostId": {
          "default": "If using resered instances, enter dedicated Host ID"
        },
        "Ec2InstanceRoleName": {
          "default": "Enter a role name for EC2 instance profile"
        },
        "UniqueID": {
          "default": "Enter a unique ID."
        },
        "LogGroupName": {
          "default": "Enter the group name for AWS Cloudwatch Logs"
        },
        "AssetsS3BucketName": {
          "default": "S3 bucket name for the Launch Wizard assets."
        },
        "AssetsS3KeyPrefix": {
          "default": "S3 key prefix for the Launch Wizard assets"
        },
        "AssetsS3RegionCode": {
          "default": "S3 region code for the Launch Wizard assets"
        },
        "ConfigurationScripts": {
          "default": "JSON representation of pre and post configuration scripts"
        }
      }
    }
  },
  "Parameters": {
    "deploymentScenario": {
      "Type": "String",
      "Default": "SapNWOnHanaSingle",
      "AllowedValues": [
        "SapNWOnHanaSingle"
      ],
      "Description": "LaunchWizard deployment scenario."
    },
    "environmentType": {
      "Type": "String",
      "Default": "production",
      "AllowedValues": [
        "production",
        "non-production"
      ],
      "Description": "Production vs non-production"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "home",
      "Description": "Name of an existing Amazon EC2 key pair. All instances will launch with this key pair."
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Default": "vpc-01234567890",
      "Description": "The existing Amazon VPC where you want to deploy the Systems"
    },
    "AZ1PrivateSubnet1ID": {
      "Type": "String",
      "Default": "",
      "Description": "Subnet ID in Availibility Zone 1."
    },
    "Proxy": {
      "Type": "String",
      "Default": "",
      "Description": "Proxy and NoProxy address for http access (e.g., http://xyz.abc.com:8080 or http://10.x.x.x:8080)."
    },
    "NoProxy": {
      "Type": "String",
      "Default": "",
      "Description": "Endpoints that need to skip proxy server."
    },
    "SAPTZ": {
      "Type": "String",
      "Default": "UTC",
      "Description": "The TimeZone of your Server"
    },
    "Encryption": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Enable (Yes) or disable (No) encryption on EBS volumes."
    },
    "EbsKmsKeyArn": {
      "Type": "String",
      "Default": "Default",
      "Description": "KMS Arn used for encryption on EBS volumes."
    },
    "CreateNewSecurityGroup": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Create new security groups"
    },
    "NewSecurityGroupCIDRs": {
      "Type": "CommaDelimitedList",
      "Default": "",
      "Description": "CIDR blocks to be used for creating a new security group."
    },
    "NewSecurityGroupExistingSourceSGIDs": {
      "Type": "CommaDelimitedList",
      "Default": "",
      "Description": "Security Group IDs to be used for creating a new security group."
    },
    "NewSecurityGroupNumCIDRs": {
      "Type": "Number",
      "Default": 0,
      "Description": "Number of CIDR blocks given for creating a new security group.",
      "MaxValue": 5,
      "MinValue": 0
    },
    "NewSecurityGroupNumSGIDs": {
      "Type": "Number",
      "Default": 0,
      "Description": "Number of Security Group IDs given for creating a new security group.",
      "MaxValue": 5,
      "MinValue": 0
    },
    "NewDBSecurityGroupName": {
      "Type": "String",
      "Default": "",
      "Description": "Name of DB tier security group created when creating new security groups."
    },
    "NewAppSecurityGroupName": {
      "Type": "String",
      "Default": "",
      "Description": "Name of application tier security group created when creating new security groups."
    },
    "NewWebDispatcherSecurityGroupName": {
      "Type": "String",
      "Default": "",
      "Description": "Name of SAP Web Dispatcher security group created when creating new security groups."
    },
    "WebDispatcherNewLoadBalancerSecurityGroupName": {
      "Type": "String",
      "Default": "",
      "Description": "Name of Load Balancer for SAP Web Dispatcher security group created when creating new security groups."
    },
    "HANADBSecurityGroupID": {
      "Type": "String",
      "Default": "",
      "Description": "Security group ID for HANA database"
    },
    "AppSecurityGroupID": {
      "Type": "String",
      "Default": "",
      "Description": "Security group ID for SAP Application"
    },
    "WebDispatcherSecurityGroupId": {
      "Type": "String",
      "Default": "",
      "Description": "Security group ID for SAP Web Dispatcher"
    },
    "WebDispatcherLoadBalancerSecurityGroupId": {
      "Type": "String",
      "Default": "",
      "Description": "Security group ID for SAP Web Dispatcher Load Balancer"
    },
    "DomainName": {
      "Type": "String",
      "Default": "local",
      "Description": "domain name to be used"
    },
    "HostedZoneName": {
      "Type": "String",
      "Default": "None",
      "Description": "Route53 hosted zone name"
    },
    "HostedZoneId": {
      "Type": "String",
      "Default": "None",
      "Description": "Route53 hosted zone id"
    },
    "DedicatedHostId": {
      "Type": "CommaDelimitedList",
      "Default": "",
      "Description": "Existing dedicated host(s) where you want to launch your EC2 instance(s). Use comma to provide multiple hosts. Mandatory for Amazon EC2 High Memory Instances."
    },
    "Ec2InstanceRoleName": {
      "Type": "String",
      "Default": "AmazonEC2RoleForLaunchWizard",
      "Description": "Role name for EC2 instance profile."
    },
    "UniqueID": {
      "Type": "String",
      "Default": "ProvisioningID",
      "Description": "Launch Provision Unique ID."
    },
    "LogGroupName": {
      "Type": "String",
      "Description": "LogGroup Name for logging with AWS Cloudwatch Logs."
    },
    "AssetsS3BucketName": {
      "Type": "String",
      "Default": "templates",
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "ConstraintDescription": "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the Launch Wizard assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
    "AssetsS3KeyPrefix": {
      "Type": "String",
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Description": "S3 key name prefix used to simulate a folder for your copy of the Launch Wizard assets. This prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/)."
    },
    "AssetsS3RegionCode": {
      "Type": "String",
      "Default": "s3.us-east-1",
      "Description": "S3 region"
    },
    "ConfigurationScripts": {
      "Type": "String",
      "Default": "{}",
      "Description": "Pre and Post scripts along with order of execution, timeouts etc.,"
    },
    "SIDadmUID": {
      "Type": "String",
      "Default": "1002",
      "Description": "UID (default is 1002) for the sidadm user."
    },
    "SAPsysGID": {
      "Type": "String",
      "Default": "1001",
      "Description": "GID (default is 1001) for the sapsys group."
    },
    "SAPVirtualIPOptIn": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Enable (Yes) or disable (No) SAP Virtual IP feature."
    },
    "HANASID": {
      "Type": "String",
      "Default": "HDB",
      "AllowedPattern": "([A-Z]{1}[0-9A-Z]{2})",
      "ConstraintDescription": "This value must consist of 3 characters.",
      "Description": "SAP HANA system ID for installation and setup.",
      "MaxLength": 3,
      "MinLength": 3
    },
    "SAPSID": {
      "Type": "String",
      "Default": "HDB",
      "AllowedPattern": "([A-Z]{1}[0-9A-Z]{2})",
      "ConstraintDescription": "This value must consist of 3 characters.",
      "Description": "SAP HANA system ID for installation and setup.",
      "MaxLength": 3,
      "MinLength": 3
    },
    "VolumeTypeAppData": {
      "Type": "String",
      "Default": "gp3",
      "AllowedValues": [
        "gp2",
        "gp3",
        "io1",
        "io2"
      ],
      "Description": "EBS volume type for SAP HANA Data"
    },
    "SAPInstanceNum": {
      "Type": "String",
      "Default": "00",
      "AllowedPattern": "([0-8]{1}[0-9]{1}|[9]{1}[0-7]{1})",
      "ConstraintDescription": "Instance number must be between 00 and 97.",
      "Description": "SAP HANA instance number to use for installation."
    },
    "HANAMasterPassKey": {
      "Type": "String",
      "Default": "Default",
      "Description": "The password must be between 10 and 13 alphanumeric characters with minimum of one upper case, one lower case and one digit, and must not begin with a number or a special character. You can use only the following special characters: # (hash or number), @ (at), and _ (underscore)."
    },
    "VolumeTypeHanaData": {
      "Type": "String",
      "Default": "gp3",
      "AllowedValues": [
        "gp2",
        "gp3",
        "io1",
        "io2",
        "fsx"
      ],
      "Description": "EBS volume type for SAP HANA Data"
    },
    "VolumeTypeHanaLog": {
      "Type": "String",
      "Default": "gp3",
      "AllowedValues": [
        "gp2",
        "gp3",
        "io1",
        "io2",
        "fsx"
      ],
      "Description": "EBS volume type for SAP HANA Log"
    },
    "VolumeTypeHanaOthers": {
      "Type": "String",
      "Default": "gp3",
      "AllowedValues": [
        "gp2",
        "gp3",
        "io1",
        "io2"
      ],
      "Description": "EBS volume type for other file systems including root"
    },
    "InstallHANA": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Install HANA software"
    },
    "HANAInstallMedia": {
      "Type": "String",
      "Default": "",
      "Description": "Full path to Amazon S3 location of SAP HANA software files (e.g. s3://myhanabucket/sap-hana-sps11/)."
    },
    "HANAOS": {
      "Type": "String",
      "Default": "SuSE-Linux-12-SP5-For-SAP-HVM",
      "Description": "Operating system and version"
    },
    "HANAAMIID": {
      "Type": "String",
      "Default": "ami-11111111111111",
      "Description": "EC2 Linux AMI ID"
    },
    "HANAAMIVolumeSizes": {
      "Type": "Number",
      "Default": "50",
      "Description": "Volume size of root volume."
    },
    "HANASLESBYOSRegCode": {
      "Type": "String",
      "Default": "",
      "Description": "SLES registration code for BYOS images"
    },
    "HANARhelByosSecretArn": {
      "Type": "String",
      "Default": "",
      "Description": "RHEL username and password Secrets Manager ARN."
    },
    "HANAHostname": {
      "Type": "String",
      "Default": "sapnw",
      "Description": "Host name to use for SAP HANA node (DNS short name)."
    },
    "HANAVirtualHostname": {
      "Type": "String",
      "Default": "sapnwvirt",
      "Description": "Virtual host name to use for SAP HANA node (DNS short name)."
    },
    "HANAAutoRecovery": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Enable (Yes) or disable (No) automatic recovery feature for SAP HANA nodes. Disable it for Dedicated Host Deployments"
    },
    "HANAInstanceType": {
      "Type": "String",
      "Default": "r5.2xlarge",
      "Description": "Instance type for HANA host"
    },
    "InstallBackint": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Install HANA Backint software"
    },
    "BackintParameters": {
      "Type": "String",
      "Default": "{}",
      "Description": "AWS Backint Agent parameters."
    },
    "HANAPrimaryByoip": {
      "Type": "String",
      "Default": "None",
      "Description": "IP to be used for the instance"
    },
    "HANAPrimaryVirtualByoip": {
      "Type": "String",
      "Default": "None",
      "Description": "Secondary IP to be used for the instance"
    },
    "HANAHostCount": {
      "Type": "Number",
      "Default": 1,
      "MaxValue": 1,
      "MinValue": 1
    },
    "EnableCloudwatchLogs": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Enable (Yes) or disable (No) logging with AWS Cloudwatch Logs."
    },
    "InstallSap": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Install SAP application software"
    },
    "SAPSoftwareStack": {
      "Type": "String",
      "Default": "ABAP",
      "AllowedValues": [
        "ABAP",
        "JAVA",
        "SOLMAN"
      ],
      "Description": "SAP software stack"
    },
    "InstallSapWebDispatcher": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Install SAP Web Dispatcher"
    },
    "WebDispatcherSystemId": {
      "Type": "String",
      "Default": "WDD",
      "AllowedPattern": "([A-Z]{1}[0-9A-Z]{2})",
      "ConstraintDescription": "This value must consist of 3 characters.",
      "Description": "SAP Web Dispatcher system ID for installation and setup.",
      "MaxLength": 3,
      "MinLength": 3
    },
    "WebDispatcherAdminUserId": {
      "Type": "String",
      "Default": "5100",
      "Description": "The User ID number for the SAP Webdispatcher Admin - wd sid adm."
    },
    "WebDispatcherVersion": {
      "Type": "String",
      "Default": "7.93",
      "Description": "SAP Web Dispatcher version being deployed."
    },
    "InstallWebDispatcherLoadBalancer": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Install SAP Web Dispatcher Load Balancer"
    },
    "WebDispatcherInstanceNumber": {
      "Type": "String",
      "Default": "14",
      "AllowedPattern": "([0-8]{1}[0-9]{1}|[9]{1}[0-7]{1})",
      "ConstraintDescription": "Instance number must be between 00 and 97.",
      "Description": "SAP Web dispatcher instance number to use for installation and setup, and to open ports for security groups."
    },
    "WebDispatcherLoadBalancerType": {
      "Type": "String",
      "Default": "ALB",
      "AllowedValues": [
        "ALB",
        "NLB"
      ],
      "Description": "Load Balancer Type for SAP Web Dispatcher"
    },
    "WebDispatcherLoadBalancerAvailabilityZone1SubnetId": {
      "Type": "String",
      "Default": "subnet-11111111111111",
      "Description": "Subnet ID from AZ1 for Load Balancer for SAP Web Dispatcher"
    },
    "WebDispatcherLoadBalancerAvailabilityZone2SubnetId": {
      "Type": "String",
      "Default": "subnet-11111111111111",
      "Description": "Private Subnet ID from AZ2 for Load Balancer for SAP Web Dispatcher"
    },
    "WebDispatcherLoadBalancerInternetFacing": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Load Balancer Scheme for SAP Web Dispatcher"
    },
    "WebDispatcherLoadBalancerSecureProtocolEnabled": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Enable (Yes) or disable (No) for Load Balancer Secure Protocl like HTTPs or SSL"
    },
    "WebDispatcherLoadBalancerACMCertificateArn": {
      "Type": "String",
      "Default": "",
      "Description": "ACM Certificate ARN for SAP Web Dispatcher Load Balancer"
    },
    "UseTransportFS": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "use EFS for sap transport directory."
    },
    "CreateEFS": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Create EFS to be used for sap transport directory"
    },
    "CreateMountTargetAZ1": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Create mount target for the EFS used for sap transport directory"
    },
    "TransportFSId": {
      "Type": "String",
      "Default": "None",
      "Description": "EFS Id used for sap transport directory"
    },
    "MountTargetIdAZ1": {
      "Type": "String",
      "Default": "None",
      "Description": "EFS Mount target id for sap transport directory."
    },
    "MountTargetSecurityGroupAZ1": {
      "Type": "String",
      "Default": "None",
      "Description": "EFS mount target security group for sap transport directory"
    },
    "MountTargetIPAddressAZ1": {
      "Type": "String",
      "Default": "None",
      "Description": "EFS mount targetip address for sap transport directory"
    },
    "Timestamp": {
      "Type": "String",
      "Default": "1234567890",
      "Description": "timestamp to be used to create a unique EFS"
    },
    "BackintCreateEbsVolume": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Create EBS volume for backup after installing backint ?"
    },
    "BackintStorageMode": {
      "Type": "String",
      "Default": "S3",
      "AllowedValues": [
        "S3",
        "AWSBACKUP"
      ],
      "Description": "Choose storage mode for Backint Agent"
    },
    "AssignBackupPlan": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Choose whether to assign backup Plan or Not"
    },
    "BackupPlanId": {
      "Type": "String",
      "Default": "",
      "Description": "Backup plan ID for AWS Backup"
    },
    "SapmediaCreateEFS": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Create EFS for storing SAP software?"
    },
    "SapMediaS3": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "sapmedia in S3?"
    },
    "SapMediaEFS": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "sapmedia in EFS?"
    },
    "AppInstallationSpecification": {
      "Type": "String",
      "Default": "{}",
      "Description": "SAP Application installation parameters as json"
    },
    "HANAFsxDataVolumeSize": {
      "Type": "Number",
      "Default": "50",
      "Description": "Volume size of hana data volume."
    },
    "HANAFsxLogVolumeSize": {
      "Type": "Number",
      "Default": "50",
      "Description": "Volume size of hana log volume."
    },
    "HANAFsxOtherVolumeSize": {
      "Type": "Number",
      "Default": "50",
      "Description": "Volume size of hana other volume."
    },
    "HANAFsxTotalVolumeSize": {
      "Type": "Number",
      "Default": "50",
      "Description": "Total ONTAP volume Size."
    },
    "IsServiceRole": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "EC2 instance role that is being passed a service role or customer created role"
    },
    "OnboardToSsmSap": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Onboard to AWS Systems Manager for SAP"
    },
    "SsmSapSecretArn": {
      "Type": "String",
      "Default": "",
      "Description": "Secrets Manager ARN for AWS Systems Manager for SAP"
    },
    "UpdateInstanceToLatestOsPatch": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "If you want Launch Wizard to patch your instances during launch"
    }
  },
  "Conditions": {
    "IsInstallSap": {
      "Fn::Equals": [
        {
          "Ref": "InstallSap"
        },
        "Yes"
      ]
    },
    "IfAbapStack": {
      "Fn::Equals": [
        {
          "Ref": "SAPSoftwareStack"
        },
        "ABAP"
      ]
    },
    "IfCreateNewSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "CreateNewSecurityGroup"
        },
        "Yes"
      ]
    },
    "oneOrMoreCIDRs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "NewSecurityGroupNumCIDRs"
                },
                "0"
              ]
            }
          ]
        }
      ]
    },
    "twoOrMoreCIDRs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "oneOrMoreCIDRs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumCIDRs"
                    },
                    "1"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "threeOrMoreCIDRs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "twoOrMoreCIDRs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumCIDRs"
                    },
                    "2"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "fourOrMoreCIDRs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "threeOrMoreCIDRs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumCIDRs"
                    },
                    "3"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "fiveCIDRs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::Equals": [
            {
              "Ref": "NewSecurityGroupNumCIDRs"
            },
            "5"
          ]
        }
      ]
    },
    "oneOrMoreSGIDs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "NewSecurityGroupNumSGIDs"
                },
                "0"
              ]
            }
          ]
        }
      ]
    },
    "twoOrMoreSGIDs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "oneOrMoreSGIDs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumSGIDs"
                    },
                    "1"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "threeOrMoreSGIDs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "twoOrMoreSGIDs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumSGIDs"
                    },
                    "2"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "fourOrMoreSGIDs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::And": [
            {
              "Condition": "threeOrMoreSGIDs"
            },
            {
              "Fn::Not": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "NewSecurityGroupNumSGIDs"
                    },
                    "3"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "fiveSGIDs": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Fn::Equals": [
            {
              "Ref": "NewSecurityGroupNumSGIDs"
            },
            "5"
          ]
        }
      ]
    },
    "isSAPVirtualIPOptIn": {
      "Fn::Equals": [
        {
          "Ref": "SAPVirtualIPOptIn"
        },
        "Yes"
      ]
    },
    "isHanaPrimaryByoip": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "HANAPrimaryByoip"
            },
            "None"
          ]
        }
      ]
    },
    "isHanaPrimaryVirtualByoip": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "Yes"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HANAPrimaryVirtualByoip"
                },
                "None"
              ]
            }
          ]
        }
      ]
    },
    "isSapSingleInterfaceWithSecondary": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "Yes"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "HANAPrimaryByoip"
            },
            "None"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "HANAPrimaryVirtualByoip"
            },
            "None"
          ]
        }
      ]
    },
    "isSapSingleInterfaceWithSecondaryByoip": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "Yes"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HANAPrimaryByoip"
                },
                "None"
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HANAPrimaryVirtualByoip"
                },
                "None"
              ]
            }
          ]
        }
      ]
    },
    "isSapSingleInterfaceWithoutSecondary": {
      "Fn::Equals": [
        {
          "Ref": "SAPVirtualIPOptIn"
        },
        "No"
      ]
    },
    "IfInstallSapWebDispatcher": {
      "Fn::Equals": [
        {
          "Ref": "InstallSapWebDispatcher"
        },
        "Yes"
      ]
    },
    "IfCreateNewSecurityGroupForSapWebDispatcher": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Condition": "IfInstallSapWebDispatcher"
        }
      ]
    },
    "IfInstallSapWebDispatcherLoadBalancer": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstallWebDispatcherLoadBalancer"
            },
            "Yes"
          ]
        },
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "IsInstallSap"
        }
      ]
    },
    "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroup"
        },
        {
          "Condition": "IfInstallSapWebDispatcherLoadBalancer"
        }
      ]
    },
    "IfWebDispatcherLoadBalancerSecureProtocolEnabled": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "WebDispatcherLoadBalancerSecureProtocolEnabled"
            },
            "Yes"
          ]
        },
        {
          "Condition": "IfInstallSapWebDispatcherLoadBalancer"
        }
      ]
    },
    "EnableRoute53": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HostedZoneName"
                },
                "None"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "No"
          ]
        }
      ]
    },
    "EnableRoute53Secondary": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HostedZoneName"
                },
                "None"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "Yes"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "HANAPrimaryByoip"
            },
            "None"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "HANAPrimaryVirtualByoip"
            },
            "None"
          ]
        }
      ]
    },
    "EnableRoute53SecondaryByoip": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HostedZoneName"
                },
                "None"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "SAPVirtualIPOptIn"
            },
            "Yes"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HANAPrimaryByoip"
                },
                "None"
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "HANAPrimaryVirtualByoip"
                },
                "None"
              ]
            }
          ]
        }
      ]
    },
    "UseEncryption": {
      "Fn::Equals": [
        {
          "Ref": "Encryption"
        },
        "Yes"
      ]
    },
    "HasEbsKmsKey": {
      "Fn::And": [
        {
          "Condition": "UseEncryption"
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "EbsKmsKeyArn"
                },
                "Default"
              ]
            }
          ]
        }
      ]
    },
    "IfDedicatedHost": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "DedicatedHostId"
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "IfDedicatedAndRecover": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "HANAAutoRecovery"
            },
            "Yes"
          ]
        },
        {
          "Condition": "IfDedicatedHost"
        }
      ]
    },
    "AutoRecoverSapSingleInstance": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "HANAAutoRecovery"
            },
            "Yes"
          ]
        },
        {
          "Fn::Not": [
            {
              "Condition": "IfDedicatedHost"
            }
          ]
        }
      ]
    },
    "UseTransEFS": {
      "Fn::Equals": [
        {
          "Ref": "UseTransportFS"
        },
        "Yes"
      ]
    },
    "CreateTransEFS": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "CreateEFS"
            },
            "Yes"
          ]
        },
        {
          "Condition": "UseTransEFS"
        }
      ]
    },
    "CreateTransEFSMountTarget": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "CreateMountTargetAZ1"
            },
            "Yes"
          ]
        },
        {
          "Condition": "UseTransEFS"
        }
      ]
    },
    "IfSapmediaCreateEFS": {
      "Fn::Equals": [
        {
          "Ref": "SapmediaCreateEFS"
        },
        "Yes"
      ]
    },
    "IfSameSecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "HANADBSecurityGroupID"
        },
        {
          "Ref": "AppSecurityGroupID"
        }
      ]
    },
    "ifOntap": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "VolumeTypeHanaData"
            },
            "fsx"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "VolumeTypeHanaLog"
            },
            "fsx"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "VolumeTypeHanaOthers"
            },
            "fsx"
          ]
        }
      ]
    },
    "ServiceRoleYes": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "IsServiceRole"
            },
            "Yes"
          ]
        },
        {
          "Condition": "ifOntap"
        }
      ]
    },
    "ServiceRoleNo": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "IsServiceRole"
            },
            "No"
          ]
        },
        {
          "Condition": "ifOntap"
        }
      ]
    },
    "isOnboardToSsmSap": {
      "Fn::Equals": [
        {
          "Ref": "OnboardToSsmSap"
        },
        "Yes"
      ]
    },
    "isAWSBackupPlanSelectionEnabled": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "OnboardToSsmSap"
            },
            "Yes"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "InstallBackint"
            },
            "Yes"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "BackintStorageMode"
            },
            "AWSBACKUP"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AssignBackupPlan"
            },
            "Yes"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "BackupPlanId"
                },
                ""
              ]
            }
          ]
        }
      ]
    },
    "ShouldCreateWdSecurityGroupCIDR1": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "oneOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupCIDR2": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "twoOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupCIDR3": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "threeOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupCIDR4": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "fourOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupCIDR5": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "fiveCIDRs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupSGID1": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "oneOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupSGID2": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "twoOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupSGID3": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "threeOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupSGID4": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "fourOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdSecurityGroupSGID5": {
      "Fn::And": [
        {
          "Condition": "IfInstallSapWebDispatcher"
        },
        {
          "Condition": "fiveSGIDs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupCIDR1": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "oneOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupCIDR2": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "twoOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupCIDR3": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "threeOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupCIDR4": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "fourOrMoreCIDRs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupCIDR5": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "fiveCIDRs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupSGID1": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "oneOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupSGID2": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "twoOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupSGID3": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "threeOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupSGID4": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "fourOrMoreSGIDs"
        }
      ]
    },
    "ShouldCreateWdLoadBalancerSecurityGroupSGID5": {
      "Fn::And": [
        {
          "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
        },
        {
          "Condition": "fiveSGIDs"
        }
      ]
    },
    "AWSSSMSAPIsSoftwareTypeABAP71D61B4C": {
      "Fn::Equals": [
        {
          "Ref": "SAPSoftwareStack"
        },
        "ABAP"
      ]
    },
    "AWSSSMSAPIsSoftwareTypeJava9177E6B5": {
      "Fn::Equals": [
        {
          "Ref": "SAPSoftwareStack"
        },
        "JAVA"
      ]
    },
    "AWSSSMSAPIsSoftwareTypeSolmanDA40A192": {
      "Fn::Equals": [
        {
          "Ref": "SAPSoftwareStack"
        },
        "SOLMAN"
      ]
    }
  },
  "Mappings": {
    "AWSLaunchWizardTags": {
      "SourceTag": {
        "Key": "SourceTemplate",
        "Value": "AWSLaunchWizard"
      },
      "ApplicationTypeTag": {
        "Key": "LaunchWizardApplicationType",
        "SAPValue": "SAP",
        "SQLValue": "SQL_SERVER",
        "ADValue": "ACTIVE_DIRECTORY",
        "LINUXValue": "SQL_SERVER_LINUX"
      }
    },
    "SAPAMINameMap": {
      "Red-Hat-Enterprise-Linux-7.6-For-SAP-HA-US-HVM": {
        "Code": "RHEL76SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-7.7-For-SAP-HA-US-HVM": {
        "Code": "RHEL77SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-7.9-For-SAP-HA-US-HVM": {
        "Code": "RHEL79SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-8.1-For-SAP-HA-US-HVM": {
        "Code": "RHEL81SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-8.2-For-SAP-HA-US-HVM": {
        "Code": "RHEL82SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-8.4-For-SAP-HA-US-HVM": {
        "Code": "RHEL84SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-8.6-For-SAP-HA-US-HVM": {
        "Code": "RHEL86SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-8.8-For-SAP-HA-US-HVM": {
        "Code": "RHEL88SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-9.0-For-SAP-HA-US-HVM": {
        "Code": "RHEL90SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-9.2-For-SAP-HA-US-HVM": {
        "Code": "RHEL92SAPHAUSHVM"
      },
      "Red-Hat-Enterprise-Linux-7.6-BYOS": {
        "Code": "RHEL76SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-7.7-BYOS": {
        "Code": "RHEL77SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-8.1-BYOS": {
        "Code": "RHEL81SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-8.2-BYOS": {
        "Code": "RHEL82SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-8.4-BYOS": {
        "Code": "RHEL84SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-8.6-BYOS": {
        "Code": "RHEL86SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-8.8-BYOS": {
        "Code": "RHEL88SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-9.0-BYOS": {
        "Code": "RHEL90SAPBYOS"
      },
      "Red-Hat-Enterprise-Linux-9.2-BYOS": {
        "Code": "RHEL92SAPBYOS"
      },
      "SuSE-Linux-12-SP4-HVM": {
        "Code": "SLES12SP4HVM"
      },
      "SuSE-Linux-12-SP5-HVM": {
        "Code": "SLES12SP5HVM"
      },
      "SuSE-Linux-15-HVM": {
        "Code": "SLES15HVM"
      },
      "SuSE-Linux-15-SP1-HVM": {
        "Code": "SLES15SP1HVM"
      },
      "SuSE-Linux-15-SP2-HVM": {
        "Code": "SLES15SP2HVM"
      },
      "SuSE-Linux-15-SP3-HVM": {
        "Code": "SLES15SP3HVM"
      },
      "SuSE-Linux-15-SP4-HVM": {
        "Code": "SLES15SP4HVM"
      },
      "SuSE-Linux-15-SP5-HVM": {
        "Code": "SLES15SP5HVM"
      },
      "SuSE-Linux-12-SP4-For-SAP-HVM": {
        "Code": "SLES12SP4SAPHVM"
      },
      "SuSE-Linux-12-SP5-For-SAP-HVM": {
        "Code": "SLES12SP5SAPHVM"
      },
      "SuSE-Linux-15-For-SAP-HVM": {
        "Code": "SLES15SAPHVM"
      },
      "SuSE-Linux-15-SP1-For-SAP-HVM": {
        "Code": "SLES15SP1SAPHVM"
      },
      "SuSE-Linux-15-SP2-For-SAP-HVM": {
        "Code": "SLES15SP2SAPHVM"
      },
      "SuSE-Linux-15-SP3-For-SAP-HVM": {
        "Code": "SLES15SP3SAPHVM"
      },
      "SuSE-Linux-15-SP4-For-SAP-HVM": {
        "Code": "SLES15SP4SAPHVM"
      },
      "SuSE-Linux-15-SP5-For-SAP-HVM": {
        "Code": "SLES15SP5SAPHVM"
      },
      "SuSE-Linux-12-SP4-For-SAP-BYOS-HVM": {
        "Code": "SLES12SP4SAPBYOSHVM"
      },
      "SuSE-Linux-12-SP5-For-SAP-BYOS-HVM": {
        "Code": "SLES12SP5SAPBYOSHVM"
      },
      "SuSE-Linux-15-For-SAP-BYOS-HVM": {
        "Code": "SLES15SAPBYOSHVM"
      },
      "SuSE-Linux-15-SP1-For-SAP-BYOS-HVM": {
        "Code": "SLES15SP1SAPBYOSHVM"
      },
      "SuSE-Linux-15-SP2-For-SAP-BYOS-HVM": {
        "Code": "SLES15SP2SAPBYOSHVM"
      },
      "SuSE-Linux-15-SP3-For-SAP-BYOS-HVM": {
        "Code": "SLES15SP3SAPBYOSHVM"
      },
      "SuSE-Linux-15-SP4-For-SAP-BYOS-HVM": {
        "Code": "SLES15SP4SAPBYOSHVM"
      },
      "SuSE-Linux-15-SP5-For-SAP-BYOS-HVM": {
        "Code": "SLES15SP5SAPBYOSHVM"
      }
    }
  },
  "Resources": {
    "NewDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable external access to the HANA leading server and allow communication to subordinate servers.",
        "GroupName": {
          "Ref": "NewDBSecurityGroupName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "NewWdSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable external access to the SAP Web Dispatcher.",
        "GroupName": {
          "Ref": "NewWebDispatcherSecurityGroupName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcher"
    },
    "NewWdLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable external access to the Load Balancer for SAP Web Dispatcher.",
        "GroupName": {
          "Ref": "WebDispatcherNewLoadBalancerSecurityGroupName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
    },
    "NewAppSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable external access to the HANA leading server and allow communication to subordinate servers.",
        "GroupName": {
          "Ref": "NewAppSecurityGroupName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "DependsOn": [
        "NewDBSecurityGroup"
      ],
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "AppSecurityGroupInternalIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "AppSecurityGroupHANADBAccessTcp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "AppSecurityGroupWebDispatcherAccessTcpMsPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "ToPort": 8197
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcher"
    },
    "WdSecurityGroupInternalIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcher"
    },
    "WdSecurityGroupLoadBalancerAccess": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "ToPort": 8097
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
    },
    "WdLoadBalancerSecurityGroupInternalIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer"
    },
    "HANADBSecurityGroupInternalIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "NewDBSecurityGroup"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "HANADBSecurityGroupAppAccessUdp1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 111,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "ToPort": 111
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "HANADBSecurityGroupAppAccessUdp2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 2049,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "ToPort": 2049
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "HANADBSecurityGroupAppAccessUdp3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "ToPort": 4002
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "HANADBSecurityGroupAppAccessTcp": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "IfCreateNewSecurityGroup"
    },
    "HANADBSecurityGroupCIDR1PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR1PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR2PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR3PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR4PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupCIDR5PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "HANADBSecurityGroupSGID1PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID1PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID2PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID3PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID4PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1128,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 1129
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4300,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8000,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8099
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39913
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30015,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39915
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30017,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39917
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30041,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39941
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 30044,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 39944
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50013,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59914
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "HANADBSecurityGroupSGID5PortRange12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewDBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupCIDR1PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR1PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR2PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR3PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR4PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupCIDR5PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveCIDRs"
    },
    "AppSecurityGroupSGID1PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID1PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "oneOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID2PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "twoOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID3PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "threeOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID4PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fourOrMoreSGIDs"
    },
    "AppSecurityGroupSGID5PortRange1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 22
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3200,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3399
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8080,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8080
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 8443,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 8443
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 3600,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 3699
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 4237,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 4237
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "AppSecurityGroupSGID5PortRange7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 50000,
        "GroupId": {
          "Ref": "NewAppSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 59901
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "fiveSGIDs"
    },
    "WdSecurityGroupCIDR1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupCIDR1"
    },
    "WdSecurityGroupCIDR2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupCIDR2"
    },
    "WdSecurityGroupCIDR3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupCIDR3"
    },
    "WdSecurityGroupCIDR4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupCIDR4"
    },
    "WdSecurityGroupCIDR5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupCIDR5"
    },
    "WdSecurityGroupSGID1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupSGID1"
    },
    "WdSecurityGroupSGID2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupSGID2"
    },
    "WdSecurityGroupSGID3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupSGID3"
    },
    "WdSecurityGroupSGID4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupSGID4"
    },
    "WdSecurityGroupSGID5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdSecurityGroupSGID5"
    },
    "WdLoadBalancerSecurityGroupCIDR1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupCIDR1"
    },
    "WdLoadBalancerSecurityGroupCIDR2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupCIDR2"
    },
    "WdLoadBalancerSecurityGroupCIDR3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupCIDR3"
    },
    "WdLoadBalancerSecurityGroupCIDR4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupCIDR4"
    },
    "WdLoadBalancerSecurityGroupCIDR5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupCIDRs"
            }
          ]
        },
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupCIDR5"
    },
    "WdLoadBalancerSecurityGroupSGID1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            0,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupSGID1"
    },
    "WdLoadBalancerSecurityGroupSGID2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            1,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupSGID2"
    },
    "WdLoadBalancerSecurityGroupSGID3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            2,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupSGID3"
    },
    "WdLoadBalancerSecurityGroupSGID4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            3,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupSGID4"
    },
    "WdLoadBalancerSecurityGroupSGID5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 1,
        "GroupId": {
          "Ref": "NewWdLoadBalancerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::Select": [
            4,
            {
              "Ref": "NewSecurityGroupExistingSourceSGIDs"
            }
          ]
        },
        "ToPort": 65535
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldCreateWdLoadBalancerSecurityGroupSGID5"
    },
    "SapSingleInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for HANA Single",
        "GroupSet": [
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewDBSecurityGroup"
              },
              {
                "Ref": "HANADBSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewAppSecurityGroup"
              },
              {
                "Ref": "AppSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroupForSapWebDispatcher",
              {
                "Fn::If": [
                  "IfCreateNewSecurityGroup",
                  {
                    "Ref": "NewWdSecurityGroup"
                  },
                  {
                    "Ref": "WebDispatcherSecurityGroupId"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "PrivateIpAddress": {
          "Fn::If": [
            "isHanaPrimaryByoip",
            {
              "Ref": "HANAPrimaryByoip"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "AZ1PrivateSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      },
      "Condition": "isSapSingleInterfaceWithoutSecondary"
    },
    "SapSingleInterfaceWithSecondary": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for HANA Single",
        "GroupSet": [
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewDBSecurityGroup"
              },
              {
                "Ref": "HANADBSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewAppSecurityGroup"
              },
              {
                "Ref": "AppSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroupForSapWebDispatcher",
              {
                "Fn::If": [
                  "IfCreateNewSecurityGroup",
                  {
                    "Ref": "NewWdSecurityGroup"
                  },
                  {
                    "Ref": "WebDispatcherSecurityGroupId"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "SecondaryPrivateIpAddressCount": 1,
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "AZ1PrivateSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      },
      "Condition": "isSapSingleInterfaceWithSecondary"
    },
    "SapSingleInterfaceWithSecondaryByoip": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for HANA Single",
        "GroupSet": [
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewDBSecurityGroup"
              },
              {
                "Ref": "HANADBSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewAppSecurityGroup"
              },
              {
                "Ref": "AppSecurityGroupID"
              }
            ]
          },
          {
            "Fn::If": [
              "IfCreateNewSecurityGroupForSapWebDispatcher",
              {
                "Fn::If": [
                  "IfCreateNewSecurityGroup",
                  {
                    "Ref": "NewWdSecurityGroup"
                  },
                  {
                    "Ref": "WebDispatcherSecurityGroupId"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "PrivateIpAddresses": [
          {
            "Primary": true,
            "PrivateIpAddress": {
              "Fn::If": [
                "isHanaPrimaryByoip",
                {
                  "Ref": "HANAPrimaryByoip"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          {
            "Primary": false,
            "PrivateIpAddress": {
              "Fn::If": [
                "isHanaPrimaryVirtualByoip",
                {
                  "Ref": "HANAPrimaryVirtualByoip"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        ],
        "SourceDestCheck": true,
        "SubnetId": {
          "Ref": "AZ1PrivateSubnet1ID"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      },
      "Condition": "isSapSingleInterfaceWithSecondaryByoip"
    },
    "SapSingleR53Record": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANAHostname"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "SapSingleInterface",
              "PrimaryPrivateIpAddress"
            ]
          }
        ],
        "TTL": "60",
        "Type": "A"
      },
      "DependsOn": [
        "SapSingleInterface"
      ],
      "Condition": "EnableRoute53"
    },
    "SapSingleR53RecordPrimary": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANAHostname"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "SapSingleInterfaceWithSecondary",
              "PrimaryPrivateIpAddress"
            ]
          }
        ],
        "TTL": "60",
        "Type": "A"
      },
      "DependsOn": [
        "SapSingleInterfaceWithSecondary"
      ],
      "Condition": "EnableRoute53Secondary"
    },
    "SapSingleR53RecordSecondary": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANAVirtualHostname"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "ResourceRecords": {
          "Fn::GetAtt": [
            "SapSingleInterfaceWithSecondary",
            "SecondaryPrivateIpAddresses"
          ]
        },
        "TTL": "60",
        "Type": "A"
      },
      "DependsOn": [
        "SapSingleInterfaceWithSecondary"
      ],
      "Condition": "EnableRoute53Secondary"
    },
    "SapSingleR53RecordPrimaryByoip": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANAHostname"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "SapSingleInterfaceWithSecondaryByoip",
              "PrimaryPrivateIpAddress"
            ]
          }
        ],
        "TTL": "60",
        "Type": "A"
      },
      "DependsOn": [
        "SapSingleInterfaceWithSecondaryByoip"
      ],
      "Condition": "EnableRoute53SecondaryByoip"
    },
    "SapSingleR53RecordSecondaryByoip": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANAVirtualHostname"
              },
              ".",
              {
                "Ref": "HostedZoneName"
              }
            ]
          ]
        },
        "ResourceRecords": {
          "Fn::GetAtt": [
            "SapSingleInterfaceWithSecondaryByoip",
            "SecondaryPrivateIpAddresses"
          ]
        },
        "TTL": "60",
        "Type": "A"
      },
      "DependsOn": [
        "SapSingleInterfaceWithSecondaryByoip"
      ],
      "Condition": "EnableRoute53SecondaryByoip"
    },
    "SAPIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "InstanceProfile"
            ]
          ]
        },
        "Path": "/",
        "Roles": [
          {
            "Ref": "Ec2InstanceRoleName"
          }
        ]
      }
    },
    "EgressCheckWaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {
        "OntapReady": {
          "Fn::If": [
            "ifOntap",
            {
              "Ref": "HanaOthersVolume"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "EgressCheckWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "EgressCheckWaitConditionHandle"
        },
        "Timeout": "1800"
      },
      "DependsOn": [
        "SapSingleInstance"
      ]
    },
    "SapSingleWaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "SapSingleWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "SapSingleWaitConditionHandle"
        },
        "Timeout": "21600"
      },
      "DependsOn": [
        "EgressCheckWaitCondition"
      ]
    },
    "WorkflowDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PrivateIpAddress",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "PrivateIpAddress",
            "KeyType": "HASH"
          }
        ],
        "TableName": {
          "Fn::Join": [
            "_",
            [
              "LaunchWizard",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "TransportDomainController": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "Encrypted": true,
        "FileSystemTags": [
          {
            "Key": "LaunchWizardApplicationType",
            "Value": "SAP"
          },
          {
            "Key": "LaunchWizardResourceGroupID",
            "Value": {
              "Ref": "UniqueID"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "SAPSID"
                  },
                  "Transport_Domain_Controller",
                  {
                    "Ref": "Timestamp"
                  }
                ]
              ]
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "CreateTransEFS"
    },
    "TransMountTargetSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable external access to the HANA leading server and allow communication to subordinate servers.",
        "GroupName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "SAPSID"
              },
              "Transport_FileSystem_SecurityGroup",
              {
                "Ref": "Timestamp"
              }
            ]
          ]
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 1,
            "IpProtocol": "-1",
            "ToPort": 65535
          }
        ],
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "HANA Database",
                  {
                    "Ref": "HANAHostname"
                  }
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCID"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "CreateTransEFSMountTarget"
    },
    "TransportDomainControllerMountTarget": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Fn::If": [
            "CreateTransEFS",
            {
              "Ref": "TransportDomainController"
            },
            {
              "Ref": "TransportFSId"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "TransMountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "AZ1PrivateSubnet1ID"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "CreateTransEFSMountTarget"
    },
    "AuthorizeAppSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 2049,
        "GroupId": {
          "Fn::If": [
            "IfCreateNewSecurityGroup",
            {
              "Ref": "NewAppSecurityGroup"
            },
            {
              "Ref": "AppSecurityGroupID"
            }
          ]
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::If": [
            "CreateTransEFSMountTarget",
            {
              "Ref": "TransMountTargetSecurityGroup"
            },
            {
              "Ref": "MountTargetSecurityGroupAZ1"
            }
          ]
        },
        "ToPort": 2049
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "UseTransEFS"
    },
    "AuthorizeTransMountTargetSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 2049,
        "GroupId": {
          "Fn::If": [
            "CreateTransEFSMountTarget",
            {
              "Ref": "TransMountTargetSecurityGroup"
            },
            {
              "Ref": "MountTargetSecurityGroupAZ1"
            }
          ]
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::If": [
            "IfCreateNewSecurityGroup",
            {
              "Ref": "NewAppSecurityGroup"
            },
            {
              "Ref": "AppSecurityGroupID"
            }
          ]
        },
        "ToPort": 2049
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "UseTransEFS"
    },
    "FsxAdmin": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": "Admin password for ONTAP",
        "GenerateSecretString": {
          "ExcludeCharacters": "\"@/\\",
          "GenerateStringKey": "password",
          "PasswordLength": 8,
          "SecretStringTemplate": "{\"username\":\"fsxadmin\"}"
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "fsxadmin"
            ]
          ]
        }
      },
      "Condition": "ifOntap"
    },
    "FsxAdminSecretResourcePolicyServiceRole": {
      "Type": "AWS::SecretsManager::ResourcePolicy",
      "Properties": {
        "ResourcePolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Resource": "*",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:GetRandomPassword"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonEC2RoleForLaunchWizard"
                }
              }
            }
          ]
        },
        "SecretId": {
          "Ref": "FsxAdmin"
        }
      },
      "Condition": "ServiceRoleYes"
    },
    "FsxAdminSecretResourcePolicyCustomeRole": {
      "Type": "AWS::SecretsManager::ResourcePolicy",
      "Properties": {
        "ResourcePolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Resource": "*",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:GetRandomPassword"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/AmazonEC2RoleForLaunchWizard"
                }
              }
            }
          ]
        },
        "SecretId": {
          "Ref": "FsxAdmin"
        }
      },
      "Condition": "ServiceRoleNo"
    },
    "FsxOntapForHanaPrimary": {
      "Type": "AWS::FSx::FileSystem",
      "Properties": {
        "FileSystemType": "ONTAP",
        "OntapConfiguration": {
          "AutomaticBackupRetentionDays": 0,
          "DeploymentType": "SINGLE_AZ_1",
          "FsxAdminPassword": {
            "Fn::Join": [
              ":",
              [
                "{{resolve:secretsmanager",
                {
                  "Ref": "FsxAdmin"
                },
                "SecretString:password}}"
              ]
            ]
          },
          "ThroughputCapacity": 1024
        },
        "SecurityGroupIds": [
          {
            "Fn::If": [
              "IfCreateNewSecurityGroup",
              {
                "Ref": "NewDBSecurityGroup"
              },
              {
                "Ref": "HANADBSecurityGroupID"
              }
            ]
          }
        ],
        "StorageCapacity": {
          "Ref": "HANAFsxTotalVolumeSize"
        },
        "StorageType": "SSD",
        "SubnetIds": [
          {
            "Ref": "AZ1PrivateSubnet1ID"
          }
        ],
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "FsxOntapForHanaPrimary"
                ]
              ]
            }
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaDataStorageVirtualMachinePrimary": {
      "Type": "AWS::FSx::StorageVirtualMachine",
      "Properties": {
        "FileSystemId": {
          "Ref": "FsxOntapForHanaPrimary"
        },
        "Name": "HanaDataStorageVirtualMachinePrimary",
        "RootVolumeSecurityStyle": "UNIX",
        "SvmAdminPassword": {
          "Fn::Join": [
            ":",
            [
              "{{resolve:secretsmanager",
              {
                "Ref": "FsxAdmin"
              },
              "SecretString:password}}"
            ]
          ]
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Data_Volume_Svm"
                ]
              ]
            }
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaDataVolume": {
      "Type": "AWS::FSx::Volume",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANASID"
              },
              "_data_mnt00001"
            ]
          ]
        },
        "OntapConfiguration": {
          "JunctionPath": {
            "Fn::Join": [
              "",
              [
                "/",
                {
                  "Ref": "HANASID"
                },
                "_data_mnt00001"
              ]
            ]
          },
          "SizeInMegabytes": {
            "Ref": "HANAFsxDataVolumeSize"
          },
          "StorageEfficiencyEnabled": "false",
          "StorageVirtualMachineId": {
            "Ref": "HanaDataStorageVirtualMachinePrimary"
          }
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Data_Volume"
                ]
              ]
            }
          }
        ],
        "VolumeType": "ONTAP"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaLogStorageVirtualMachinePrimary": {
      "Type": "AWS::FSx::StorageVirtualMachine",
      "Properties": {
        "FileSystemId": {
          "Ref": "FsxOntapForHanaPrimary"
        },
        "Name": "HanaLogStorageVirtualMachinePrimary",
        "RootVolumeSecurityStyle": "UNIX",
        "SvmAdminPassword": {
          "Fn::Join": [
            ":",
            [
              "{{resolve:secretsmanager",
              {
                "Ref": "FsxAdmin"
              },
              "SecretString:password}}"
            ]
          ]
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Log_Volume_Svm"
                ]
              ]
            }
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaLogVolume": {
      "Type": "AWS::FSx::Volume",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANASID"
              },
              "_log_mnt00001"
            ]
          ]
        },
        "OntapConfiguration": {
          "JunctionPath": {
            "Fn::Join": [
              "",
              [
                "/",
                {
                  "Ref": "HANASID"
                },
                "_log_mnt00001"
              ]
            ]
          },
          "SizeInMegabytes": {
            "Ref": "HANAFsxLogVolumeSize"
          },
          "StorageEfficiencyEnabled": "false",
          "StorageVirtualMachineId": {
            "Ref": "HanaLogStorageVirtualMachinePrimary"
          }
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Log_Volume"
                ]
              ]
            }
          }
        ],
        "VolumeType": "ONTAP"
      },
      "DependsOn": [
        "HanaDataVolume"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaOthersStorageVirtualMachinePrimary": {
      "Type": "AWS::FSx::StorageVirtualMachine",
      "Properties": {
        "FileSystemId": {
          "Ref": "FsxOntapForHanaPrimary"
        },
        "Name": "HanaOthersStorageVirtualMachinePrimary",
        "RootVolumeSecurityStyle": "UNIX",
        "SvmAdminPassword": {
          "Fn::Join": [
            ":",
            [
              "{{resolve:secretsmanager",
              {
                "Ref": "FsxAdmin"
              },
              "SecretString:password}}"
            ]
          ]
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Others_Volume_Svm"
                ]
              ]
            }
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "HanaOthersVolume": {
      "Type": "AWS::FSx::Volume",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HANASID"
              },
              "_shared"
            ]
          ]
        },
        "OntapConfiguration": {
          "JunctionPath": {
            "Fn::Join": [
              "",
              [
                "/",
                {
                  "Ref": "HANASID"
                },
                "_shared"
              ]
            ]
          },
          "SizeInMegabytes": {
            "Ref": "HANAFsxOtherVolumeSize"
          },
          "StorageEfficiencyEnabled": "false",
          "StorageVirtualMachineId": {
            "Ref": "HanaOthersStorageVirtualMachinePrimary"
          }
        },
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Hana_Others_Volume"
                ]
              ]
            }
          }
        ],
        "VolumeType": "ONTAP"
      },
      "DependsOn": [
        "HanaLogVolume"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ifOntap"
    },
    "SapSingleInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "Encrypted": {
                "Fn::If": [
                  "UseEncryption",
                  true,
                  false
                ]
              },
              "KmsKeyId": {
                "Fn::If": [
                  "HasEbsKmsKey",
                  {
                    "Ref": "EbsKmsKeyArn"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "VolumeSize": {
                "Ref": "HANAAMIVolumeSizes"
              },
              "VolumeType": {
                "Ref": "VolumeTypeHanaOthers"
              }
            }
          }
        ],
        "HostId": {
          "Fn::If": [
            "IfDedicatedHost",
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "DedicatedHostId"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "SAPIAMProfile"
        },
        "ImageId": {
          "Ref": "HANAAMIID"
        },
        "InstanceType": {
          "Ref": "HANAInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Monitoring": true,
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Fn::If": [
                "isSapSingleInterfaceWithoutSecondary",
                {
                  "Ref": "SapSingleInterface"
                },
                {
                  "Fn::If": [
                    "isSapSingleInterfaceWithSecondary",
                    {
                      "Ref": "SapSingleInterfaceWithSecondary"
                    },
                    {
                      "Fn::If": [
                        "isSapSingleInterfaceWithSecondaryByoip",
                        {
                          "Ref": "SapSingleInterfaceWithSecondaryByoip"
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "PropagateTagsToVolumeOnCreation": true,
        "Tags": [
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "SourceTag",
                "Value"
              ]
            }
          },
          {
            "Key": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "Key"
              ]
            },
            "Value": {
              "Fn::FindInMap": [
                "AWSLaunchWizardTags",
                "ApplicationTypeTag",
                "SAPValue"
              ]
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "SAP Single Instance",
                  {
                    "Ref": "HANAHostname"
                  }
                ]
              ]
            }
          },
          {
            "Key": "SSMForSAPManaged",
            "Value": {
              "Fn::If": [
                "isOnboardToSsmSap",
                "True",
                "False"
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \nset -Eeuxo pipefail \nexport MyOS=\"",
                {
                  "Fn::FindInMap": [
                    "SAPAMINameMap",
                    {
                      "Ref": "HANAOS"
                    },
                    "Code"
                  ]
                },
                "\"\nhostname ",
                {
                  "Ref": "HANAHostname"
                },
                "\necho ",
                {
                  "Fn::Join": [
                    ".",
                    [
                      {
                        "Ref": "HANAHostname"
                      },
                      {
                        "Fn::If": [
                          "EnableRoute53",
                          {
                            "Ref": "HostedZoneName"
                          },
                          {
                            "Fn::If": [
                              "EnableRoute53Secondary",
                              {
                                "Ref": "HostedZoneName"
                              },
                              {
                                "Fn::If": [
                                  "EnableRoute53SecondaryByoip",
                                  {
                                    "Ref": "HostedZoneName"
                                  },
                                  {
                                    "Ref": "DomainName"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                },
                " | tee /etc/hostname /etc/HOSTNAME > /dev/null \nexport MyStackId=\"",
                {
                  "Ref": "AWS::StackId"
                },
                "\"\nexport SecondaryHostname=\"",
                {
                  "Fn::If": [
                    "isSAPVirtualIPOptIn",
                    {
                      "Ref": "HANAVirtualHostname"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                "\"\nset +x \nexport WaitForMasterInstallWaitHandle=\"",
                {
                  "Ref": "SapSingleWaitConditionHandle"
                },
                "\"\nexport EgressCheckWaitHandle=\"",
                {
                  "Ref": "EgressCheckWaitConditionHandle"
                },
                "\"\nexport IMDS_TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\nexport SLESBYOSRegCode=\"",
                {
                  "Ref": "HANASLESBYOSRegCode"
                },
                "\"\nset -x \nexport DdbTableName=\"",
                {
                  "Ref": "WorkflowDB"
                },
                "\"\nexport HANAHostCount=1\nexport Role=\"pas,ascs,dbprimary,webdisp\"\nexport SLESBYOSRegCode=\"",
                {
                  "Ref": "HANASLESBYOSRegCode"
                },
                "\"\nexport RhelByosSecretArn=\"",
                {
                  "Ref": "HANARhelByosSecretArn"
                },
                "\"\nexport URLSuffix=\"",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "\"\nexport InstallSap=\"",
                {
                  "Ref": "InstallSap"
                },
                "\"\nexport InstallSapWebDispatcher=\"",
                {
                  "Ref": "InstallSapWebDispatcher"
                },
                "\"\nexport SapMediaS3=\"",
                {
                  "Ref": "SapMediaS3"
                },
                "\"\nexport SapMediaEFS=\"",
                {
                  "Ref": "SapMediaEFS"
                },
                "\"\nexport SapMediaCreateEFS=\"",
                {
                  "Ref": "SapmediaCreateEFS"
                },
                "\"\nexport AppInstallationSpecification=\"",
                {
                  "Ref": "AppInstallationSpecification"
                },
                "\"\nexport use_efs_trans=\"",
                {
                  "Ref": "UseTransportFS"
                },
                "\"\nexport efs_trans_mount_target=",
                {
                  "Fn::If": [
                    "CreateTransEFSMountTarget",
                    {
                      "Fn::GetAtt": [
                        "TransportDomainControllerMountTarget",
                        "IpAddress"
                      ]
                    },
                    {
                      "Ref": "MountTargetIPAddressAZ1"
                    }
                  ]
                },
                "\nexport NodeType=DB\nHOME_DIR=\"/root/install\"\nmkdir -p ${HOME_DIR}\ntrap onexit ERR \nfunction onexit() {\n   local _msg=\"Error on line $(caller)\"\n   echo Exiting $0 with $_msg\n   exit 1\n}\n\nsource /etc/os-release \n#####################\n# Proxy settings     \n#####################\n\nexport no_proxy=localhost,127.0.0.1,169.254.169.254,",
                {
                  "Ref": "NoProxy"
                },
                "\nexport NO_PROXY=${no_proxy} \nexport http_proxy=",
                {
                  "Ref": "Proxy"
                },
                "\nexport HTTP_PROXY=${http_proxy} \nexport https_proxy=${http_proxy} \nexport HTTPS_PROXY=${http_proxy} \n\n##################\n# patch instance  \n##################\n\nif [[ ${ID} == \"rhel\" ]] && [[ ",
                {
                  "Fn::Sub": "${UpdateInstanceToLatestOsPatch}"
                },
                " == \"Yes\" ]]; then \n    yum update -y || true\nfi\nif [[ ${ID} == \"sles\" ]] && [[ ",
                {
                  "Fn::Sub": "${UpdateInstanceToLatestOsPatch}"
                },
                " == \"Yes\" ]]; then \n    zypper update -y || true\nfi\n##################\n# install awscli  \n##################\n\nUNZIP_INSTALLED=$(which unzip) || true\nset +Eeuxo pipefail \nif [[ ! ${UNZIP_INSTALLED} =~ \"unzip\" ]]; then\n if [[ ${ID} == \"sles\" ]]; then \n   zypper install -y unzip\n fi\n if [[ ${ID} == \"rhel\" ]] && [[ ${VERSION_ID} =~ ^9 ]]; then \n   yum install -y unzip\n   yum install -y wget\n   yum install -y sqlite\n elif [[ ${ID} == \"rhel\" ]] && [[ ${VERSION_ID} =~ ^8 ]]; then \n   yum install -y unzip\n   yum install -y wget\n   yum install -y sqlite\n elif [[ ${ID} == \"rhel\" ]] && [[ ${VERSION_ID} =~ ^7 ]]; then \n   rpm -i http://mirror.centos.org/centos/7/os/x86_64/Packages/unzip-6.0-21.el7.x86_64.rpm\n fi\nfi\ncurl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o ${HOME_DIR}/awscliv2.zip\nunzip ${HOME_DIR}/awscliv2.zip -d  ${HOME_DIR}/awscliv2\nsudo ${HOME_DIR}/awscliv2/aws/install --update\nrm -f ${HOME_DIR}/awscliv2.zip\nsleep 30\nset -Eeuxo pipefail \n\n###################\n# download scripts \n###################\n\nset +Eeuxo pipefail \nuntil [[ -f ${HOME_DIR}/scripts.zip ]];do\n   aws s3 cp ",
                {
                  "Fn::Sub": "s3://${AssetsS3BucketName}/${AssetsS3KeyPrefix}sap/scripts/scripts.zip"
                },
                " ${HOME_DIR}/scripts.zip  || true \n   sleep 30\ndone\nuntil [[ -f ${HOME_DIR}/scripts.zip.sig ]];do\n   aws s3 cp ",
                {
                  "Fn::Sub": "s3://${AssetsS3BucketName}/${AssetsS3KeyPrefix}sap/scripts/scripts.zip.sig"
                },
                " ${HOME_DIR}/scripts.zip.sig  || true \n   sleep 30\ndone\nuntil [[ -f ${HOME_DIR}/key.pem ]];do\n   aws s3 cp ",
                {
                  "Fn::Sub": "s3://${AssetsS3BucketName}/${AssetsS3KeyPrefix}sap/scripts/key.pem"
                },
                " ${HOME_DIR}/key.pem  || true \n   sleep 30\ndone\nopenssl dgst -sha256 -verify ${HOME_DIR}//key.pem -keyform PEM -signature ${HOME_DIR}//scripts.zip.sig ${HOME_DIR}//scripts.zip\nif [[ $? -eq 0 ]]; then\n   set -Eeuxo pipefail \n   unzip  ${HOME_DIR}/scripts.zip -d  ${HOME_DIR}/\n   chmod -R 775  ${HOME_DIR}\n   rm -f  ${HOME_DIR}/scripts.zip \n   mkdir -p /root/install/scripts/log\n${HOME_DIR}/scripts/install.sh\nelse\n   echo \"scripts.zip is tampered. exiting...\"\n   exit 1\nfi\n\n"
              ]
            ]
          }
        }
      }
    },
    "WebDispatcherLoadBalancerStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "VpcId": {
            "Ref": "VPCID"
          },
          "InstanceIds": {
            "Ref": "SapSingleInstance"
          },
          "InstancesNumber": "1",
          "InstancePort": {
            "Fn::If": [
              "IfAbapStack",
              {
                "Fn::Join": [
                  "",
                  [
                    "80",
                    {
                      "Ref": "WebDispatcherInstanceNumber"
                    }
                  ]
                ]
              },
              {
                "Fn::Join": [
                  "",
                  [
                    "5",
                    {
                      "Ref": "WebDispatcherInstanceNumber"
                    },
                    "00"
                  ]
                ]
              }
            ]
          },
          "LoadBalancerType": {
            "Ref": "WebDispatcherLoadBalancerType"
          },
          "LoadBalancerInternetFacing": {
            "Ref": "WebDispatcherLoadBalancerInternetFacing"
          },
          "LoadBalancerSecurityGroup": {
            "Fn::If": [
              "IfCreateNewSecurityGroupForSapWebDispatcherLoadBalancer",
              {
                "Ref": "NewWdLoadBalancerSecurityGroup"
              },
              {
                "Ref": "WebDispatcherLoadBalancerSecurityGroupId"
              }
            ]
          },
          "LoadBalancerAvailabilityZone1SubnetId": {
            "Ref": "WebDispatcherLoadBalancerAvailabilityZone1SubnetId"
          },
          "LoadBalancerAvailabilityZone2SubnetId": {
            "Ref": "WebDispatcherLoadBalancerAvailabilityZone2SubnetId"
          },
          "LoadBalancerSecureProtocolEnabled": {
            "Ref": "WebDispatcherLoadBalancerSecureProtocolEnabled"
          },
          "LoadBalancerACMCertificateArn": {
            "Fn::If": [
              "IfWebDispatcherLoadBalancerSecureProtocolEnabled",
              {
                "Ref": "WebDispatcherLoadBalancerACMCertificateArn"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "SAPSoftwareStack": {
            "Ref": "SAPSoftwareStack"
          }
        },
        "TemplateURL": {
          "Fn::Sub": "https://${AssetsS3BucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sap/templates/LoadBalancer.template.json"
        }
      },
      "Condition": "IfInstallSapWebDispatcherLoadBalancer"
    },
    "AutoRecoverAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":automate:",
                {
                  "Ref": "AWS::Region"
                },
                ":ec2:recover"
              ]
            ]
          }
        ],
        "AlarmDescription": "Trigger a recovery when instance status check fails for 5 consecutive minute.",
        "AlarmName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "AWS::StackName"
              },
              "AutoRecoverAlarmMaster"
            ]
          ]
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "SapSingleInstance"
            }
          }
        ],
        "EvaluationPeriods": 5,
        "MetricName": "StatusCheckFailed_System",
        "Namespace": "AWS/EC2",
        "Period": 60,
        "Statistic": "Minimum",
        "Threshold": 0
      },
      "Condition": "AutoRecoverSapSingleInstance"
    },
    "AWSSAPDataProvider": {
      "Type": "AWS::SSM::Association",
      "Properties": {
        "AssociationName": {
          "Fn::Join": [
            "-",
            [
              "HANA-Database",
              {
                "Ref": "HANAHostname"
              },
              "AWSSAPDataProvider"
            ]
          ]
        },
        "Name": "AWS-ConfigureAWSPackage",
        "Parameters": {
          "action": [
            "Install"
          ],
          "installationType": [
            "Uninstall and reinstall"
          ],
          "name": [
            "AWSSAPTools-DataProvider"
          ]
        },
        "ScheduleExpression": "cron(0 00 08 ? * * *)",
        "Targets": [
          {
            "Key": "tag:aws:cloudformation:stack-name",
            "Values": [
              {
                "Ref": "AWS::StackName"
              }
            ]
          }
        ]
      },
      "DependsOn": [
        "SapSingleWaitCondition"
      ]
    },
    "AWSSSMSAPDatabaseApplicationCE9C1824": {
      "Type": "AWS::SystemsManagerSAP::Application",
      "Properties": {
        "ApplicationId": {
          "Fn::Join": [
            "_",
            [
              {
                "Fn::Join": [
                  "",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  }
                ]
              },
              "HANA"
            ]
          ]
        },
        "ApplicationType": "HANA",
        "Credentials": [
          {
            "CredentialType": "ADMIN",
            "DatabaseName": {
              "Fn::Join": [
                "/",
                [
                  {
                    "Ref": "HANASID"
                  },
                  "SYSTEMDB"
                ]
              ]
            },
            "SecretId": {
              "Ref": "SsmSapSecretArn"
            }
          },
          {
            "CredentialType": "ADMIN",
            "DatabaseName": {
              "Fn::Join": [
                "/",
                [
                  {
                    "Ref": "HANASID"
                  },
                  {
                    "Ref": "HANASID"
                  }
                ]
              ]
            },
            "SecretId": {
              "Ref": "SsmSapSecretArn"
            }
          }
        ],
        "Instances": [
          {
            "Ref": "SapSingleInstance"
          }
        ],
        "SapInstanceNumber": {
          "Ref": "SAPInstanceNum"
        },
        "Sid": {
          "Ref": "HANASID"
        }
      },
      "DependsOn": [
        "SapSingleWaitCondition"
      ],
      "Condition": "isOnboardToSsmSap"
    },
    "AWSSSMSAPSapApplicationF152A0B2": {
      "Type": "AWS::SystemsManagerSAP::Application",
      "Properties": {
        "ApplicationId": {
          "Fn::Join": [
            "_",
            [
              {
                "Fn::Join": [
                  "",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  }
                ]
              },
              {
                "Ref": "SAPSoftwareStack"
              }
            ]
          ]
        },
        "ApplicationType": {
          "Fn::If": [
            "AWSSSMSAPIsSoftwareTypeABAP71D61B4C",
            "SAP_ABAP",
            {
              "Fn::If": [
                "AWSSSMSAPIsSoftwareTypeJava9177E6B5",
                "JAVA",
                {
                  "Fn::If": [
                    "AWSSSMSAPIsSoftwareTypeSolmanDA40A192",
                    "SOLMAN",
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "Instances": [
          {
            "Ref": "SapSingleInstance"
          }
        ],
        "Sid": {
          "Ref": "SAPSID"
        },
        "DatabaseArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":ssm-sap:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":HANA/",
              {
                "Fn::Join": [
                  "",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  }
                ]
              },
              "_HANA/DB/",
              {
                "Ref": "HANASID"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "AWSSSMSAPDatabaseApplicationCE9C1824"
      ],
      "Condition": "isOnboardToSsmSap"
    },
    "AWSBackupPlanSelection": {
      "Type": "AWS::Backup::BackupSelection",
      "Properties": {
        "BackupPlanId": {
          "Ref": "BackupPlanId"
        },
        "BackupSelection": {
          "IamRoleArn": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/"
                },
                "AWSBackupDefaultServiceRole"
              ]
            ]
          },
          "Resources": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":ssm-sap:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":HANA/",
                  {
                    "Fn::Join": [
                      "_",
                      [
                        {
                          "Fn::Join": [
                            "",
                            {
                              "Fn::Split": [
                                "-",
                                {
                                  "Ref": "AWS::StackName"
                                }
                              ]
                            }
                          ]
                        },
                        "HANA"
                      ]
                    ]
                  },
                  "/DB/SYSTEMDB"
                ]
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":ssm-sap:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":HANA/",
                  {
                    "Fn::Join": [
                      "_",
                      [
                        {
                          "Fn::Join": [
                            "",
                            {
                              "Fn::Split": [
                                "-",
                                {
                                  "Ref": "AWS::StackName"
                                }
                              ]
                            }
                          ]
                        },
                        "HANA"
                      ]
                    ]
                  },
                  "/DB/",
                  {
                    "Ref": "HANASID"
                  }
                ]
              ]
            }
          ],
          "SelectionName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "BackupSelection"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "AWSSSMSAPDatabaseApplicationCE9C1824"
      ],
      "Condition": "isAWSBackupPlanSelectionEnabled"
    }
  }
}